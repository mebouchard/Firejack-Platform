/*
 * Firejack Open Flame - Copyright (c) 2012 Firejack Technologies
 *
 * This source code is the product of the Firejack Technologies
 * Core Technologies Team (Benjamin A. Miller, Oleg Marshalenko, and Timur
 * Asanov) and licensed only under valid, executed license agreements
 * between Firejack Technologies and its customers. Modification and / or
 * re-distribution of this source code is allowed only within the terms
 * of an executed license agreement.
 *
 * Any modification of this code voids any and all warranties and indemnifications
 * for the component in question and may interfere with upgrade path. Firejack Technologies
 * encourages you to extend the core framework and / or request modifications. You may
 * also submit and assign contributions to Firejack Technologies for consideration
 * as improvements or inclusions to the platform to restore modification
 * warranties and indemnifications upon official re-distributed in patch or release form.
 */

package net.firejack.platform.service.registry.broker.bi;

import net.firejack.platform.api.registry.domain.BIReportUser;
import net.firejack.platform.api.registry.model.BIReportLocation;
import net.firejack.platform.core.broker.ServiceBroker;
import net.firejack.platform.core.domain.SimpleIdentifier;
import net.firejack.platform.core.model.registry.bi.BIReportFieldModel;
import net.firejack.platform.core.model.registry.bi.BIReportModel;
import net.firejack.platform.core.model.registry.bi.BIReportUserFieldModel;
import net.firejack.platform.core.model.registry.bi.BIReportUserModel;
import net.firejack.platform.core.model.registry.domain.EntityModel;
import net.firejack.platform.core.model.registry.field.FieldModel;
import net.firejack.platform.core.model.user.UserModel;
import net.firejack.platform.core.request.ServiceRequest;
import net.firejack.platform.core.response.ServiceResponse;
import net.firejack.platform.core.store.bi.IBIReportStore;
import net.firejack.platform.core.store.bi.IBIReportUserStore;
import net.firejack.platform.core.store.registry.IEntityStore;
import net.firejack.platform.core.store.registry.IFieldStore;
import net.firejack.platform.web.security.model.context.OPFContext;
import net.firejack.platform.web.statistics.annotation.TrackDetails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@TrackDetails
@Component
public class ReadAllowBIReportUserBroker extends ServiceBroker<ServiceRequest<SimpleIdentifier<String>>, ServiceResponse<BIReportUser>> {

    @Autowired
    private IBIReportUserStore store;

    @Override
    protected ServiceResponse<BIReportUser> perform(ServiceRequest<SimpleIdentifier<String>> request) throws Exception {

//        init();

        String packageLookup = request.getData().getIdentifier();
        Long userId = OPFContext.getContext().getPrincipal().getUserInfoProvider().getId();

        List<BIReportUserModel> reports = store.loadReportUserByPackage(packageLookup, userId);
        List<BIReportUser> reportUsers = factory.convertTo(BIReportUser.class, reports);

        return new ServiceResponse<BIReportUser>(reportUsers, "Loaded Bi Report User", true);
    }

    @Autowired
    private IEntityStore entityStore;
    @Autowired
    private IFieldStore fieldStore;
    @Autowired
    private IBIReportStore reportStore;
    @Autowired
    private IBIReportUserStore reportUserStore;

    public void init() {

//        EntityModel factEntityModel = entityStore.findByLookup("com.coolmovies.coolmovies.star.fact-request");
//
//    	List<FieldModel> fields = fieldStore.findAllByLikeLookupPrefix(factEntityModel.getLookup());
//
//    	BIReportModel biReportModel = new BIReportModel();
//    	biReportModel.setName("BIReport4");
//    	biReportModel.setParent(factEntityModel);
//
//    	List<BIReportFieldModel> biReportFieldModels = new ArrayList<BIReportFieldModel>();
//    	for (FieldModel field : fields) {
//            if (!Boolean.TRUE.equals(field.getAutoGenerated()) && field.getFieldType().isNumber()) {
//                BIReportFieldModel biReportFieldModel = new BIReportFieldModel();
//                biReportFieldModel.setCount(10);
//                biReportFieldModel.setDisplayName(field.getDisplayName());
//                biReportFieldModel.setEntity(factEntityModel);
//                biReportFieldModel.setField(field);
//                biReportFieldModels.add(biReportFieldModel);
//            }
//    	}
//
//        addDimFields("com.coolmovies.coolmovies.star.dim-dot", biReportFieldModels);
//        addDimFields("com.coolmovies.coolmovies.star.dim-band", biReportFieldModels);
//        addDimFields("com.coolmovies.coolmovies.star.dim-workforce-type", biReportFieldModels);
//        addDimFields("com.coolmovies.coolmovies.star.dim-location", biReportFieldModels);
//        addDimFields("com.coolmovies.coolmovies.star.dim-start-date", biReportFieldModels);
//        addDimFields("com.coolmovies.coolmovies.star.dim-state", biReportFieldModels);
//
//        biReportModel.setFields(biReportFieldModels);
//
//    	reportStore.saveForGenerator(biReportModel);

        BIReportModel biReportModel = reportStore.findByLookup("com.coolmovies.coolmovies.star.fact-request.bireport3");

        List<BIReportFieldModel> biReportFieldModels = biReportModel.getFields();

    	BIReportUserModel biReportUserModel = new BIReportUserModel();
        biReportUserModel.setTitle("BIReport3-2 User 1");
        biReportUserModel.setReport(biReportModel);

    	UserModel user = new UserModel();
    	user.setId(1L);
    	biReportUserModel.setUser(user);

        List<BIReportUserFieldModel> biReportUserFieldModels = new ArrayList<BIReportUserFieldModel>();

        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-start-date.year", BIReportLocation.VERTICAL, 0));
        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-start-date.quarter-name", BIReportLocation.VERTICAL, 1));
        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-location.country", BIReportLocation.VERTICAL, 2));
        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-workforce-type.workforce-type", BIReportLocation.VERTICAL, 3));
        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-band.band", BIReportLocation.VERTICAL, 4));

        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-dot.two-dot", BIReportLocation.HORIZONTAL, 0));
        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-dot.three-dot", BIReportLocation.HORIZONTAL, 1));
//        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-band.band", BIReportLocation.HORIZONTAL, 2));
//        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.dim-workforce-type.workforce-type", BIReportLocation.HORIZONTAL, 3));

        biReportUserFieldModels.add(createBIReportUserField(biReportFieldModels, "com.coolmovies.coolmovies.star.fact-request.resource-count", BIReportLocation.MEASURE, 2));

        biReportUserModel.setFields(biReportUserFieldModels);



//    	List<BIReportUserFilterModel> filters = new ArrayList<BIReportUserFilterModel>();
//    	biReportUserModel.setFilter();

//    	for (BIReportFieldModel biReportFieldModel : biReportFieldModels) {
//            // BAND
//            if (biReportFieldModel.getField().getLookup().equals("com.coolmovies.coolmovies.star.dim-band.id")) {
//                BIReportUserFilterModel biReportUserFilterModel = new BIReportUserFilterModel();
//                biReportUserFilterModel.setField(biReportFieldModel);
//                biReportUserFilterModel.setValues(Arrays.asList(103L, 133L, 257L, 267L));
//                filters.add(biReportUserFilterModel);
//            }
//
//            // WORKFORCE TYPE
//            if (biReportFieldModel.getField().getLookup().equals("com.coolmovies.coolmovies.star.dim-workforce-type.id")) {
//                BIReportUserFilterModel biReportUserFilterModel = new BIReportUserFilterModel();
//                biReportUserFilterModel.setField(biReportFieldModel);
//                biReportUserFilterModel.setValues(Arrays.asList(108L, 123L, 135L/*, 1295L*/));
//                filters.add(biReportUserFilterModel);
//            }
//
//            // STATE
//            if (biReportFieldModel.getField().getLookup().equals("com.coolmovies.coolmovies.star.dim-state.id")) {
//                BIReportUserFilterModel biReportUserFilterModel = new BIReportUserFilterModel();
//                biReportUserFilterModel.setField(biReportFieldModel);
//                biReportUserFilterModel.setValues(Arrays.asList(114L, 297L, 690L, 4641L));
//                filters.add(biReportUserFilterModel);
//            }
//    	}

    	reportUserStore.saveOrUpdate(biReportUserModel);

    }

    private void addDimFields(String lookup, List<BIReportFieldModel> fieldModels) {
        EntityModel dimEntityModel = entityStore.findByLookup(lookup);
        List<FieldModel> dimFields = fieldStore.findAllByLikeLookupPrefix(dimEntityModel.getLookup());
        for (FieldModel field : dimFields) {
            if (!Boolean.TRUE.equals(field.getAutoGenerated())) {
                BIReportFieldModel biReportFieldModel = new BIReportFieldModel();
                biReportFieldModel.setCount(10);
                biReportFieldModel.setDisplayName(field.getDisplayName());
                biReportFieldModel.setEntity(dimEntityModel);
                biReportFieldModel.setField(field);
                fieldModels.add(biReportFieldModel);
            }
        }
    }

    private BIReportUserFieldModel createBIReportUserField(List<BIReportFieldModel> biReportFieldModels, String fieldLookup, BIReportLocation location, int order) {
        BIReportUserFieldModel biReportUserFieldModel = null;
        for (BIReportFieldModel biReportFieldModel : biReportFieldModels) {
            if (biReportFieldModel.getField().getLookup().equals(fieldLookup)) {
                biReportUserFieldModel = new BIReportUserFieldModel();
                biReportUserFieldModel.setExpanded(true);
                biReportUserFieldModel.setField(biReportFieldModel);
                biReportUserFieldModel.setLocation(location);
                biReportUserFieldModel.setOrder(order);
                break;
            }
        }
        return biReportUserFieldModel;
    }
}
