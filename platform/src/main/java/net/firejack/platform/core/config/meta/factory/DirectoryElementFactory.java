/*
 * Firejack Open Flame - Copyright (c) 2011 Firejack Technologies
 *
 * This source code is the product of the Firejack Technologies
 * Core Technologies Team (Benjamin A. Miller, Oleg Marshalenko, and Timur
 * Asanov) and licensed only under valid, executed license agreements
 * between Firejack Technologies and its customers. Modification and / or
 * re-distribution of this source code is allowed only within the terms
 * of an executed license agreement.
 *
 * Any modification of this code voids any and all warranties and indemnifications
 * for the component in question and may interfere with upgrade path. Firejack Technologies
 * encourages you to extend the core framework and / or request modifications. You may
 * also submit and assign contributions to Firejack Technologies for consideration
 * as improvements or inclusions to the platform to restore modification
 * warranties and indemnifications upon official re-distributed in patch or release form.
 */

package net.firejack.platform.core.config.meta.factory;

import net.firejack.platform.core.config.meta.IFieldElement;
import net.firejack.platform.core.config.meta.IFieldElementContainer;
import net.firejack.platform.core.config.meta.element.directory.DirectoryElement;
import net.firejack.platform.core.model.registry.directory.DirectoryModel;
import net.firejack.platform.core.model.registry.field.FieldModel;
import net.firejack.platform.core.store.registry.IFieldStore;
import net.firejack.platform.core.utils.type.AllowedFieldValuesListUserType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;


public class DirectoryElementFactory extends PackageDescriptorConfigElementFactory<DirectoryModel, DirectoryElement> {

    @Autowired
    @Qualifier("fieldStore")
    private IFieldStore fieldStore;

    /***/
    public DirectoryElementFactory() {
        setEntityClass(DirectoryModel.class);
        setElementClass(DirectoryElement.class);
    }

    @Override
    protected void initEntitySpecific(DirectoryModel directory, DirectoryElement directoryElement) {
        super.initEntitySpecific(directory, directoryElement);
        directory.setServerName(directoryElement.getServerName());
        directory.setUrlPath(directoryElement.getUrlPath());
        directory.setDirectoryType(directoryElement.getDirectoryType());
        directory.setStatus(directoryElement.getStatus());
        List<FieldModel> fieldList = new ArrayList<FieldModel>();
        IFieldElement[] fields = directoryElement.getFields();
        if (fields != null) {
            for (IFieldElement field : fields) {
                fieldList.add(prepareField(field));
            }
        }
        directory.setFields(fieldList);
    }

    @Override
    protected void initDescriptorElementSpecific(DirectoryElement directoryElement, DirectoryModel directory) {
        super.initDescriptorElementSpecific(directoryElement, directory);
        directoryElement.setServerName(directory.getServerName());
        directoryElement.setUrlPath(directory.getUrlPath());
        directoryElement.setDirectoryType(directory.getDirectoryType());
        directoryElement.setStatus(directory.getStatus());
        populateFields(directoryElement, directory.getId());
    }

    private FieldModel prepareField(IFieldElement field) {
        FieldModel f = new FieldModel();
        f.setName(field.getName());
        f.setFieldType(field.getType());
        f.setRequired(field.isRequired());
        f.setCustomFieldType(field.getCustomType());
        f.setSearchable(field.isSearchable());
	    f.setDisplayName(field.getDisplayName());
	    f.setDisplayDescription(field.getDisplayDescription());
	    AllowedFieldValuesListUserType userType = new AllowedFieldValuesListUserType();
	    f.setAllowedFieldValueList(userType.deserialize(field.getAllowValues()));
        f.setAutoGenerated(field.isAutoGenerated());
        if (field.isAutoGenerated()) {
            field.setUid(UUID.randomUUID().toString());
        }
        if (field.getDefaultValue() != null) {
            f.setDefaultValue(String.valueOf(field.getDefaultValue()));
        }
        PackageDescriptorConfigElementFactory.initializeModelUID(f, field);
        return f;
    }

    private void populateFields(IFieldElementContainer fieldElementContainer, Long registryNodeId) {
        List<FieldModel> fields = fieldStore.findFieldsByRegistryNodeId(registryNodeId);
        if (fields != null && !fields.isEmpty()) {
            for (FieldModel field : fields) {
                //String defaultValue = "null".equalsIgnoreCase(field.getDefaultValue()) ? null : field.getDefaultValue();
	            configElementFactory.produceField(fieldElementContainer, field);
            }
        }
    }

}