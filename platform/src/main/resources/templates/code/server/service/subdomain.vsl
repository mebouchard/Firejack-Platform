#foreach($sub in $subs)

	@XmlType(name = "", namespace = "$render.reverse($package)")
	@XmlAccessorType(XmlAccessType.FIELD)
	public static class ${sub.name}#if (${sub.parent.name}) extends #if($imports.contains($sub.parent))$sub.parent.name#else$sub.parent.fullName#end#end {
		private static final long serialVersionUID = $render.generateSerialUID()L;

#foreach($field in $sub.fields)
		/**
		*$!{field.description}
		*/
		@Property
#if (${field.domainTypeName} == "java.sql.Date")
		@JsonDeserialize(using = SqlDateDeserializer.class)
		@XmlJavaTypeAdapter(SQLDateAdapter.class)
#end
#if (${field.domainTypeName} == "java.sql.Time")
		@JsonDeserialize(using = SqlTimeDeserializer.class)
		@XmlJavaTypeAdapter(SQLTimeAdapter.class)
#end
#if($field.optionExist)
		@XmlElements({
#foreach($option in $field.options)
		        @XmlElement(name = "${option.domain.normalize}", namespace = "$render.reverse($option.domain.package)", type = ${option.domain.name}.class),
#end
		})
#end
		private ${field.domainTypeName} ${field.name};
#end
#foreach($field in $sub.fields)
		/**
		*$!{field.description}
		*@return
		*/
		$render.renderValidateAnnotation($field)
		public ${field.domainTypeName} get${field.method}() {
			return this.${field.name};
		}

		/**
		*$!{field.description}
		*@param ${field.name}
		*/
		public void set${field.method}(${field.domainTypeName} ${field.name}) {
			this.${field.name} = ${field.name};
		}
#end

#if($sub.subclasses)
#set( $subs = $sub.subclass )
#parse("/templates/code/server/service/subdomain.vsl")
#end

	}
#end