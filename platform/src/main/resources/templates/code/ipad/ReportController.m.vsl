#import "${name}.h"

\#define LIMIT 15

@implementation $name

- (id)initWithModel:(GWModel *) model {
    self = [super initWithModel:model];
    if (self) {
        self.title = model.name;

        UIView *leftContainer = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 360, 44)];

        UIButton *back = [[UIButton alloc] initWithFrame:CGRectMake(0, 7.5, 50, 30)];
        back.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        back.titleLabel.textColor = [UIColor whiteColor];
        back.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        back.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [back setTitle:@"Back" forState:UIControlStateNormal];
        [back addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_ltf" rigth:@"gr_button_rf" toSize:back.frame.size] forState:UIControlStateNormal];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_lta" rigth:@"gr_button_ra" toSize:back.frame.size] forState:UIControlStateSelected];
        [leftContainer addSubview:back];
        [back release];

        UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:leftContainer];
        self.navigationItem.leftBarButtonItem = left;
        [leftContainer release];
        [left release];

        _gridView = [[GWGridView alloc] initWithFrame:CGRectMake(0, 0, 1024, 704)];
        _gridView.dataSource = self;
        _gridView.delegate = self;
        _gridView.limit = @LIMIT;
        [self.view addSubview:_gridView];
        [_gridView release];

        UIViewController *imageController = [[UIViewController alloc] init];
        _imageView = [[UIImageView alloc] init];
        imageController.view = _imageView;
        [_imageView release];

        _imagePopover = [[UIPopoverController alloc] initWithContentViewController:imageController];
        [imageController release];

    }
    return self;
}

- (void) viewWillAppear:(BOOL)animated {
    self.navigationController.navigationBarHidden = NO;
    [super viewWillAppear:animated];
}

- (void)viewDidLoad {
    [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (void)dealloc {
    [_imagePopover release];
    [_data release];
    [super dealloc];
}

- (void) pushedController:(UIViewController *) controller {
    [_gridView refresh];
}

- (void) refreshGrid:(NSNotification *) notification {
    [_gridView refresh];
}

#pragma mark -
#pragma mark Grid Delegate

- (void)requestFinished:(ASIHTTPRequest *) request {
    NSData *responseData = [request responseData];
    UIImage *image = [UIImage imageWithData:responseData];
    if (image) {
        _imageView.image = image;
        _imagePopover.popoverContentSize = image.size;
        GWGridCellView *cell = _gridView.selectCell;
        [_imagePopover presentPopoverFromRect:CGRectMake(ViewWidth(cell)/2, ViewHeight(cell)/2, 0, 0) inView:cell permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
    } else {
        [self error:@"Resource can't loaded"];
    }

    [self release];
}

#pragma mark -
#pragma mark Grid Data Source

- (NSInteger) numberOfColumns:(GWGridView *)gridView {
    return [_model.property count];
}

- (NSInteger) numberOfRow:(GWGridView *) gridView {
    return MAX([_data count], [gridView.limit intValue]);
}

- (UIView *) view:(GWGridView *) gridView viewFoRow:(NSInteger) row column:(NSInteger) column {
    GWGridCellView *cell = [gridView dequeueReusableCell];
    if(!cell) {
        cell = [[[GWGridCellView alloc] initWithFrame:CGRectZero] autorelease];
    }

    if ([_data count] <= row) return cell;

    GWEntity *entity = [_data objectAtIndex:row];
    GWProperty *property = [_model.property objectAtIndex:column];
    if (property.type == GWPropertyTypeImage) {
        if ([property value:entity]) {
            UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"imageIcon"]];
            imageView.frame = CGRectMake(30, 0, 40, 40);
            [cell addSubview:imageView];
            [imageView release];
        }
    } else if (property.type == GWPropertyTypeList) {
        if ([property value:entity]) {
            UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"imageIcon"]];
            imageView.frame = CGRectMake(30, 0, 40, 40);
            [cell addSubview:imageView];
            [imageView release];
        }
    } else {
        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(15, 5, ViewWidth(cell), 30)];
        label.font = [UIFont fontWithName:@"HelveticaNeue" size:15];
        label.textColor = UIColorFromHex(0x667580);
        label.layer.shadowColor = [UIColor whiteColor].CGColor;
        label.layer.shadowOffset = CGSizeMake(0, 1);
        label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        label.backgroundColor = [UIColor clearColor];
        label.text = [property stringValue:entity];
        [cell addSubview:label];
        [label release];
    }

    return cell;
}

- (void) header:(GWGridView *) gridView view:(UIView *) view column:(NSInteger) column {
        GWProperty *property = [_model.property objectAtIndex:column];

        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(15, 5, ViewWidth(view), 30)];
        label.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:15];
        label.textColor = UIColorFromHex(0xD9EFFFE);
        label.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        label.layer.shadowOffset = CGSizeMake(0, -1);
        label.text = property.display;
        label.backgroundColor = [UIColor clearColor];
        label.textColor = [UIColor whiteColor];
        label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        [view addSubview:label];
        [label release];
}

- (CGFloat) headerHeight:(GWGridView *) gridView {
    return 43;
}

- (CGFloat) cellHeight:(GWGridView *) gridView {
    return 40;
}

- (CGFloat)cellWidth:(GWGridView *)gridView atColumn:(NSUInteger) column {
    return ViewWidth(gridView) / MIN([_model.property count], 5);
}

#pragma mark -
#pragma mark PAGING Delegate

- (void)paging:(GWPagingView *)paging offset:(NSNumber *)offset limit:(NSNumber *)limit {
    [_data release];
    NSNumber *total = nil;

    NSString *queryParameters = nil;
    NSString *sortOrder = nil;

    SEL action = [_model findSelectorByType:GWActionTypeAdvancedSearch];
    _data = [[Util call:self.api selector:action args:&queryParameters, &offset, &limit, &sortOrder, &total, nil] retain];

    _gridView.total = total;
    [_gridView reloadData];
}

@end