#import "${name}.h"

@implementation $name

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        UIImageView *background = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"edit_background"]];
        [self.view addSubview:background];
        [background release];
        
        _slideView = [[GWSlideView alloc] initWithFrame:CGRectMake(1024, 0, 320, 704)];
        _slideView.dataSource = self;
        _slideView.delegate = self;
        [self.view addSubview:_slideView];
        [_slideView release];
        
        UIButton *back = [[UIButton alloc] initWithFrame:CGRectMake(5, 7.5, 50, 30)];
        back.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        back.titleLabel.textColor = [UIColor whiteColor];
        back.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        back.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [back setTitle:@"Back" forState:UIControlStateNormal];
        [back addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_ltf" rigth:@"gr_button_rf" toSize:back.frame.size] forState:UIControlStateNormal];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_lta" rigth:@"gr_button_ra" toSize:back.frame.size] forState:UIControlStateSelected];
        
        UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:back];
        self.navigationItem.leftBarButtonItem = left;
        [left release];
        [back release];
        
        UIView *rightContainer = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 160, 44)];
        
        _add = [[UIButton alloc] initWithFrame:CGRectMake(5, 7.5, 100, 30)];
        _add.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        _add.titleLabel.textColor = [UIColor whiteColor];
        _add.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        _add.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        _add.hidden = YES;
        [_add addTarget:self action:@selector(addChild:) forControlEvents:UIControlEventTouchUpInside];
        [_add setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_lf" rigth:@"gr_button_rf" toSize:_add.frame.size] forState:UIControlStateNormal];
        [_add setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_la" rigth:@"gr_button_ra" toSize:_add.frame.size] forState:UIControlStateSelected];
        [rightContainer addSubview:_add];
        [_add release];
        
        _action = [[UIButton alloc] initWithFrame:CGRectMake(110, 7.5, 50, 30)];
        _action.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        _action.titleLabel.textColor = [UIColor whiteColor];
        _action.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        _action.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [_action setTitle:@"Save" forState:UIControlStateNormal];
        [_action addTarget:self action:@selector(action:) forControlEvents:UIControlEventTouchUpInside];
        [_action setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_lf" rigth:@"gr_button_rf" toSize:_action.frame.size] forState:UIControlStateNormal];
        [_action setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_la" rigth:@"gr_button_ra" toSize:_action.frame.size] forState:UIControlStateSelected];
        [rightContainer addSubview:_action];
        [_action release];
        
        UIBarButtonItem *right = [[UIBarButtonItem alloc] initWithCustomView:rightContainer];
        self.navigationItem.rightBarButtonItem = right;
        [right release];
        [rightContainer release];
        
        _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, 1024, 704)];
        _scrollView.bounces = NO;
        [self.view addSubview:_scrollView];
        [_scrollView release];
        _slideView.adjacentView = _scrollView;
    }
    return self;
}

- (void)dealloc {
    [_properties release];
    [_model release];
    [_parent release];
    [_entity release];
    [_data release];
    [super dealloc];
}

- (void)viewDidLoad {
    [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (void) pushedController:(UIViewController *) controller {
    if (!_properties) {
        _properties = [[NSMutableArray alloc] init];
        
        if (_model.parent) {
            [_add setTitle:[NSString stringWithFormat:@"Add %@", _model.parent.reference.name] forState:UIControlStateNormal];
            _add.hidden = NO;
        }
        
        if (!_entity) {
            _entity = [[NSClassFromString(_model.name) alloc] init];
        }
        
        CGFloat y = 21;
        CGFloat width = ViewWidth(_scrollView);
        CGFloat indent = (width - 670)/2.0;
        
        for (GWProperty *property in _model.property) {
            if (property.attribute != GWPropertyAttributeAutogenerated) {
                GWPropertyView *view = [GWPropertyViewFactory createPropertyView:CGRectMake(indent, y, 670, 75) property:property];
                view.delegate = self;
                view.entity = _entity;
                view.mainView = self.view;
                view.sliderView = _slideView;
                [view addTarget:self action:@selector(selected:) forControlEvents:UIControlEventEditingDidBegin | UIControlEventEditingDidEndOnExit];
                [_scrollView addSubview:view];
                [view prepare];
                
                y = ViewY(view) + ViewHeight(view) + 15;
                [_properties addObject:view];
            }
        }
        
        _scrollView.contentSize = CGSizeMake(1024, y + 600);
    }
}

- (void) reload {
    CGFloat width = ViewWidth(_scrollView);
    CGFloat indent = (width - 670)/2.0;
    
    CGFloat y = 21;
    for (GWPropertyView *view in _properties) {
        CGRect frame = view.frame;
        frame.origin.x = indent;
        frame.origin.y = y;
        view.frame = frame;
        
        y += ViewHeight(view) + 15;
    }
    
    _scrollView.contentSize = CGSizeMake(width, y + 600);
}

- (void) selected:(GWPropertyView *) sender {
    if (sender.selected) {
		if (_active && _active != sender && _active.selected) {
          _active.selected = NO;
          if ([sender isKindOfClass:[GWReferencePropertyView class]])
              [self.view endEditing:NO];
        }
        [_scrollView setContentOffset: CGPointMake( _scrollView.contentOffset.x, ViewY(sender) - 15) animated: YES];
        [_action setTitle:@"Done" forState:UIControlStateNormal];
        _active = sender;
    } else {
        [_action setTitle:@"Save" forState:UIControlStateNormal];
        _active = nil;
    }
}

- (BOOL) isValidForm {
    for (GWPropertyView *property in _properties) {
        if (!property.valid) {
            [self error:property.error];
            return NO;
        }
    }
    return YES;
}

- (void) addChild:(UIButton *) sender {
    [self moveToParentFilter:_model.parent];
}

- (void) action:(UIButton *) sender {
    if ([[sender titleForState:UIControlStateNormal] isEqualToString:@"Done"]) {
        [self.view endEditing:NO];
        _active.selected = NO;
        
        //[_scrollView setContentOffset:CGPointZero animated: YES];
        [_action setTitle:@"Save" forState:UIControlStateNormal];
        return;
    } else if (![self isValidForm]) {
        return;
    }
    
    if ([self saveEntity]) {
        [self.navigationController popViewControllerAnimated:YES];
    }
}

- (BOOL) saveEntity {
    
    for (GWPropertyView *property in _properties) {
        [property prePersist];
    }
    
    GWEntity *entity;
    NSNumber *pk = _entity.pk;
    if (pk) {
        SEL action = [_model findSelectorByType:GWActionTypeUpdate];
        entity = [Util call:self.api selector:action args:&pk, &_entity, nil];
    } else {
        SEL action = [_model findSelectorByType:GWActionTypeCreate];
        entity = [Util call:self.api selector:action args:&_entity, nil];
    }
    
    if (entity) {
        self.entity = entity;
    }
    return entity != nil;
}

#pragma mark -
#pragma mark ImagePicker Delegate

- (void) loadImage:(GWImagePickerView *) view lookup:(NSString *) lookup {
    [self.api image:lookup delegate:view];
}

- (void) uploadImage:(GWImagePickerView *) view image:(UIImage *) image {
    view.file = [self.api uploadPhoto:UIImagePNGRepresentation(image)];
}

#pragma mark -
#pragma mark Property View Delegate

- (void) layout:(GWPropertyView *) propertyView {
    [self reload];
}

- (void) prepersist:(GWPropertyView *) propertyView property:(GWProperty *) property userObject:(id) userObject {
    if ([propertyView isKindOfClass:[GWImagePropertyView class]]) {
        GWImagePickerView *imageView = userObject;
        
        if (imageView.status == GWImagePickerStatusUpload) {
            OFImageResourceVersion *image = [self.api createImageResource:imageView.file name:@"image.png" entity:_model.lookup];
            [property setStringValue:image.resourceLookup forObject:_entity];
            imageView.lookup = image.resourceLookup;
        } else if (imageView.status == GWImagePickerStatusUpdate) {
            [self.api updateImageResource:imageView.file name:@"image.png" resource:imageView.lookup];
        } else if (imageView.status == GWImagePickerStatusDelete) {
            [self.api deleteImageResource:imageView.lookup];
            [property setStringValue:nil forObject:_entity];
            imageView.lookup = nil;
        }
    }
}

- (void) pushController:(GWPropertyView *) propertyView property:(GWProperty *) property {
    if ([[_action titleForState:UIControlStateNormal] isEqualToString:@"Done"]) {
		[self.view endEditing:NO];
		_active.selected = NO;

        
        [_scrollView setContentOffset:CGPointZero animated: YES];
        [_action setTitle:@"Save" forState:UIControlStateNormal];
    }
    
    if ([propertyView isKindOfClass:[GWTreePropertyView class]]) {
        [self moveToParentFilter: (GWRelationship *) property];
    }
}

- (void) moveToParentFilter:(GWRelationship *) relationship {
	[self.view endEditing:NO];
	_active.selected = NO;

    if ([self isValidForm] && [self saveEntity]) {
        GWEntityViewController *controller = [[NSClassFromString(relationship.reference.controller) alloc] initWithModel:relationship.reference];
        controller.parent = _entity;
        controller.parentProperty = relationship;
        controller.queryParameters = [NSString stringWithFormat:TREE_FILTER, _entity.pk];
        [self.navigationController pushViewController:controller animated:YES];
        [controller release];
    }
}

#pragma mark -
#pragma mark Slide Data Source

- (BOOL) slideIsMultipleSelection:(GWSlideView *) slide {
    return _active.propertyType == GWPropertyTypeList;
}

- (void) slide:(GWSlideView *) slide term:(NSString *) term offset:(NSNumber *) offset limit:(NSNumber *) limit total:(NSNumber **) total {
    SEL action = [_active referenceSelectorByType:GWActionTypeAdvancedSearch];
    NSString *referencePath = [_active referencePath];
    
    NSString *queryParameters = @"[]";
    if (_active.propertyType == GWPropertyTypeTree && _entity.pk && term) {
        queryParameters = [NSString stringWithFormat:PARENT_SEARCH_FILTER, _entity.pk, referencePath, term];
    } else if (_active.propertyType == GWPropertyTypeTree && _entity.pk) {
        queryParameters = [NSString stringWithFormat:PARENT_FILTER, _entity.pk];
    } else if (term) {
        queryParameters = [NSString stringWithFormat:SEARCH_FILTER, referencePath, term];
    }
    
    NSString *sortOrder = nil;
    NSMutableArray *data = [Util call:self.api selector:action args:&queryParameters, &offset, &limit, &sortOrder, total, nil];
    if ([offset intValue] == 0) {
        [_data release];
        _data = [data retain];
    } else {
        [_data addObjectsFromArray:data];
    }
}

- (void) slide:(GWSlideView *) slide cell:(GWSlideCellView *) cell forRow:(NSUInteger) row {
    GWEntity *entity = [_data objectAtIndex:row];
    
    cell.headingLabel.text = [_active referenceHeading:entity];
    cell.subHeadingLabel.text = [_active referenceSubHeading:entity];
    cell.descriptionLabel.text = [_active referenceDescription:entity];
}

- (BOOL) slide:(GWSlideView *) slide isSelectedRow:(NSUInteger)row {
    id value = [_active value];
    if ([value respondsToSelector:@selector(containsObject:)]) {
        return [value containsObject:[_data objectAtIndex:row]];
    } else {
        return [value isEqual:[_data objectAtIndex:row]];
    }
}

#pragma mark -
#pragma mark Slide Delegate

- (void) slide:(GWSlideView *) slide visible:(BOOL) visible {
    [self reload];
}

- (void) slide:(GWSlideView *) slide didSelectForRow:(NSUInteger) row {
    [_active setValue:[_data objectAtIndex:row]];
}

- (void) slide:(GWSlideView *) slide didDeselectForRow:(NSUInteger) row {
    if (_active.propertyType == GWPropertyTypeList)
        [_active removeObject:[_data objectAtIndex:row]];
}

@end