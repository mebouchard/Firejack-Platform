#import "${name}.h"

\#define LIMIT 15

@implementation $name

- (id)initWithModel:(GWModel *) model {
    self = [super initWithModel:model];
    if (self) {
        self.title = model.name;

        UIView *leftContainer = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 360, 44)];

        UIButton *back = [[UIButton alloc] initWithFrame:CGRectMake(0, 7.5, 50, 30)];
        back.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        back.titleLabel.textColor = [UIColor whiteColor];
        back.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        back.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [back setTitle:@"Back" forState:UIControlStateNormal];
        [back addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_ltf" rigth:@"gr_button_rf" toSize:back.frame.size] forState:UIControlStateNormal];
        [back setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_lta" rigth:@"gr_button_ra" toSize:back.frame.size] forState:UIControlStateSelected];
        [leftContainer addSubview:back];
        [back release];

        UIView *searchIcon = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"edit_search"]];

        _searchFieldView = [[GWTextFieldView alloc] initWithFrame:CGRectMake(80, 7.5, 195, 30)];
        _searchFieldView.font = [UIFont fontWithName:@"HelveticaNeue" size:15];
        _searchFieldView.placeholder = @"Search";
        _searchFieldView.dx = 30;
        _searchFieldView.dy = 5;
        _searchFieldView.leftIcon = CGRectMake(8, 8, 14, 14);
        _searchFieldView.textColor = UIColorFromHex(0x7F7F7F);
        _searchFieldView.keyboardType = UIKeyboardTypeNumberPad;
        _searchFieldView.returnKeyType = UIReturnKeySearch;
        _searchFieldView.backgroundColor = [UIColor whiteColor];
        _searchFieldView.layer.cornerRadius = 16;
        _searchFieldView.leftView = searchIcon;
        _searchFieldView.leftViewMode = UITextFieldViewModeAlways;
        _searchFieldView.clearButtonMode = UITextFieldViewModeAlways;
        _searchFieldView.delegate = self;
        [leftContainer addSubview:_searchFieldView];
        [_searchFieldView release];
        [searchIcon release];

        /*UIButton *advanced = [[UIButton alloc] initWithFrame:CGRectMake(280, 7.5, 80, 30)];
         advanced.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
         advanced.titleLabel.textColor = [UIColor whiteColor];
         advanced.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
         advanced.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
         [advanced setTitle:@"Advanced" forState:UIControlStateNormal];
         //        [advanced addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
         [advanced setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_lf" rigth:@"gr_button_rf" toSize:advanced.frame.size] forState:UIControlStateNormal];
         [advanced setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_la" rigth:@"gr_button_ra" toSize:advanced.frame.size] forState:UIControlStateSelected];
         [leftContainer addSubview:advanced];
         [advanced release];*/

        UIBarButtonItem *left = [[UIBarButtonItem alloc] initWithCustomView:leftContainer];
        self.navigationItem.leftBarButtonItem = left;
        [leftContainer release];
        [left release];

        UIView *rightContainer = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 270, 44)];

        /*UIButton *chart = [[UIButton alloc] initWithFrame:CGRectMake(10, 7.5, 100, 30)];
         chart.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
         chart.titleLabel.textColor = [UIColor whiteColor];
         chart.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
         chart.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
         [chart setTitle:@"Create Cart" forState:UIControlStateNormal];
         // [chart addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
         [chart setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_lf" rigth:@"gr_button_rf" toSize:chart.frame.size] forState:UIControlStateNormal];
         [chart setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_la" rigth:@"gr_button_ra" toSize:chart.frame.size] forState:UIControlStateSelected];
         [rightContainer addSubview:chart];
         [chart release];*/

        UIButton *add = [[UIButton alloc] initWithFrame:CGRectMake(140, 7.5, 50, 30)];
        add.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        add.titleLabel.textColor = [UIColor whiteColor];
        add.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        add.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [add setTitle:@"Add" forState:UIControlStateNormal];
        [add addTarget:self action:@selector(create:) forControlEvents:UIControlEventTouchUpInside];
        [add setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_cf" left:@"gr_button_lf" rigth:@"gr_button_rf" toSize:add.frame.size] forState:UIControlStateNormal];
        [add setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_ca" left:@"gr_button_la" rigth:@"gr_button_ra" toSize:add.frame.size] forState:UIControlStateSelected];
        [rightContainer addSubview:add];
        [add release];

        UIButton *delete = [[UIButton alloc] initWithFrame:CGRectMake(200, 7.5, 70, 30)];
        delete.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:12];
        delete.titleLabel.textColor = [UIColor whiteColor];
        delete.titleLabel.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        delete.titleLabel.layer.shadowOffset = CGSizeMake(0, -1);
        [delete setTitle:@"Delete" forState:UIControlStateNormal];
        [delete addTarget:self action:@selector(delete:) forControlEvents:UIControlEventTouchUpInside];
        [delete setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_red_cf" left:@"gr_button_red_lf" rigth:@"gr_button_red_rf" toSize:delete.frame.size] forState:UIControlStateNormal];
        [delete setBackgroundImage:[UIImage stretchableImageNamed:@"gr_button_red_ca" left:@"gr_button_red_la" rigth:@"gr_button_red_ra" toSize:delete.frame.size] forState:UIControlStateSelected];
        [rightContainer addSubview:delete];
        [delete release];

        UIBarButtonItem *right = [[UIBarButtonItem alloc] initWithCustomView:rightContainer];
        self.navigationItem.rightBarButtonItem = right;
        [rightContainer release];
        [right release];

        _gridView = [[GWGridView alloc] initWithFrame:CGRectMake(0, 0, 1024, 704)];
        _gridView.dataSource = self;
        _gridView.delegate = self;
        _gridView.limit = @LIMIT;
        [self.view addSubview:_gridView];
        [_gridView release];

        _delete = [[NSMutableArray alloc] initWithCapacity:LIMIT];

        UIViewController *imageController = [[UIViewController alloc] init];
        _imageView = [[UIImageView alloc] init];
        imageController.view = _imageView;
        [_imageView release];

        _imagePopover = [[UIPopoverController alloc] initWithContentViewController:imageController];
        [imageController release];

        _listPopover = [[GWPopoverGridView alloc] initWithSize:CGSizeMake(300, 400)];

    }
    return self;
}

- (void) viewWillAppear:(BOOL)animated {
    self.navigationController.navigationBarHidden = NO;
    [super viewWillAppear:animated];
}

- (void)viewDidLoad {
    [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (void)dealloc {
    [_imagePopover release];
    [_listPopover  release];
    [_data release];
    [_delete release];
    [super dealloc];
}

- (void) pushedController:(UIViewController *) controller {
    if (self.queryParameters) {
        _searchFieldView.hidden = YES;
    }
    [_gridView refresh];
}

- (void) create:(UIButton *) sender {
	${edit.name} *controller = [[${edit.name} alloc] init];
    controller.title = self.title;
    controller.model = _model;

    if (self.parent && self.parentProperty) {
        GWEntity *entity = [[NSClassFromString(_model.name) alloc] init];
        [self.parentProperty setValue:self.parent forObject:entity];
        controller.entity = entity;
        [entity release];
    }

    [self.navigationController pushViewController:controller animated:YES];
    [controller release];
}

- (void) delete:(UIButton *) sender {
    SEL action = [_model findSelectorByType:GWActionTypeDelete];
    for (GWEntity *item in _delete) {
        NSNumber *pk = item.pk;
        [Util call:self.api selector:action args:&pk, nil];
    }
    [_delete removeAllObjects];
    [_gridView refresh];
}

- (void) refreshGrid:(NSNotification *) notification {
    [_delete removeAllObjects];
    [_gridView refresh];
}

#pragma mark -
#pragma mark Search Delegate
- (BOOL)textFieldShouldClear:(UITextField *)textField {
    [_gridView refresh];
    return YES;
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    NSUInteger length = [textField.text length];
    if (length != 0) {
        [_gridView refresh];
    }
    return [textField resignFirstResponder];
}

#pragma mark -
#pragma mark Grid Delegate

- (void) selectCell:(GWGridView *) gridView atCell:(GWGridCellView *) cell {
    if (cell.column == 0) {
        UIImageView *imageView = [cell.subviews objectAtIndex:0];
        imageView.highlighted = ! imageView.highlighted;

        if (imageView.highlighted) {
            [_delete addObject:[_data objectAtIndex:cell.row]];
        } else {
            [_delete removeObject:[_data objectAtIndex:cell.row]];
        }
    } else if ([_data count] > cell.row) {
        GWProperty *property = [_model.property objectAtIndex:cell.column - 1];
        GWEntity *entity = [_data objectAtIndex:cell.row];

        if (property.type == GWPropertyTypeImage) {
            [self.api image:[property stringValue:entity] delegate:self];
        } else if (property.type == GWPropertyTypeList) {
            _listPopover.model = [(GWRelationship *) property reference];
            _listPopover.data = [property value:entity];
            [_listPopover refreshForView:cell];
        } else {
			${edit.name} *controller = [[${edit.name} alloc] init];
            controller.title = self.title;
            controller.model = _model;
            controller.entity = entity;
            [self.navigationController pushViewController:controller animated:YES];
            [controller release];
        }
    }
}

- (void)requestFinished:(ASIHTTPRequest *) request {
    NSData *responseData = [request responseData];
    UIImage *image = [UIImage imageWithData:responseData];
    if (image) {
        _imageView.image = image;
        _imagePopover.popoverContentSize = image.size;
        GWGridCellView *cell = _gridView.selectCell;
        [_imagePopover presentPopoverFromRect:CGRectMake(ViewWidth(cell)/2, ViewHeight(cell)/2, 0, 0) inView:cell permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
    } else {
        [self error:@"Resource can't loaded"];
    }

    [self release];
}

#pragma mark -
#pragma mark Grid Data Source

- (NSInteger) numberOfColumns:(GWGridView *)gridView {
    return [_model.property count] + 1;
}

- (NSInteger) numberOfRow:(GWGridView *) gridView {
    return MAX([_data count], [gridView.limit intValue]);
}

- (UIView *) view:(GWGridView *) gridView viewFoRow:(NSInteger) row column:(NSInteger) column {
    GWGridCellView *cell = [gridView dequeueReusableCell];
    if(!cell) {
        cell = [[[GWGridCellView alloc] initWithFrame:CGRectZero] autorelease];
    }

    if ([_data count] <= row) return cell;

    if (column == 0) {
        UIImageView *checkbox = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"gr_checkbox_f"] highlightedImage:[UIImage imageNamed:@"gr_checkbox_a"]];
        checkbox.frame = CGRectMake(9, 9, 25, 26);
        [cell addSubview:checkbox];
        [checkbox release];
    } else {
        GWEntity *entity = [_data objectAtIndex:row];
        GWProperty *property = [_model.property objectAtIndex:column - 1];
        if (property.type == GWPropertyTypeImage) {
            if ([property value:entity]) {
                UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"imageIcon"]];
                imageView.frame = CGRectMake(30, 0, 40, 40);
                [cell addSubview:imageView];
                [imageView release];
            }
        } else if (property.type == GWPropertyTypeList) {
            if ([property value:entity]) {
                UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"imageIcon"]];
                imageView.frame = CGRectMake(30, 0, 40, 40);
                [cell addSubview:imageView];
                [imageView release];
            }
        } else {
            UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(15, 5, ViewWidth(cell), 30)];
            label.font = [UIFont fontWithName:@"HelveticaNeue" size:15];
            label.textColor = UIColorFromHex(0x667580);
            label.layer.shadowColor = [UIColor whiteColor].CGColor;
            label.layer.shadowOffset = CGSizeMake(0, 1);
            label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
            label.backgroundColor = [UIColor clearColor];
            label.text = [property stringValue:entity];
            [cell addSubview:label];
            [label release];
        }
    }

    return cell;
}

- (void) header:(GWGridView *) gridView view:(UIView *) view column:(NSInteger) column {
    if (column != 0) {
        GWProperty *property = [_model.property objectAtIndex:column - 1];

        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(15, 5, ViewWidth(view), 30)];
        label.font = [UIFont fontWithName:@"HelveticaNeue-Bold" size:15];
        label.textColor = UIColorFromHex(0xD9EFFFE);
        label.layer.shadowColor = UIColorFromHex(0x1F2933).CGColor;
        label.layer.shadowOffset = CGSizeMake(0, -1);
        label.text = property.display;
        label.backgroundColor = [UIColor clearColor];
        label.textColor = [UIColor whiteColor];
        label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        [view addSubview:label];
        [label release];
    }
}

- (CGFloat) headerHeight:(GWGridView *) gridView {
    return 43;
}

- (CGFloat) cellHeight:(GWGridView *) gridView {
    return 40;
}

- (CGFloat)cellWidth:(GWGridView *)gridView atColumn:(NSUInteger) column {
    return column == 0 ? 44 : (ViewWidth(gridView) - 44) / MIN([_model.property count], 5);
}

#pragma mark -
#pragma mark PAGING Delegate

- (void)paging:(GWPagingView *)paging offset:(NSNumber *)offset limit:(NSNumber *)limit {
    [_delete removeAllObjects];
    [_data release];
    NSNumber *total = nil;
    NSString *columnName = @"id";
    NSString *sortDirection = @"ASC";

    if (self.queryParameters) {
        NSString *queryParameters = self.queryParameters;
        NSString *sortOrder = self.sortOrder;

        SEL action = [_model findSelectorByType:GWActionTypeAdvancedSearch];
        _data = [[Util call:self.api selector:action args:&queryParameters, &offset, &limit, &sortOrder, &total,nil] retain];
    } else if (_searchFieldView.editing) {
        NSString *term = _searchFieldView.text;
        SEL action = [_model findSelectorByType:GWActionTypeSearch];
        _data = [[Util call:self.api selector:action args:&term, &offset, &limit, &columnName, &sortDirection, &total,nil] retain];
    } else {
        SEL action = [_model findSelectorByType:GWActionTypeReadAll];
        _data = [[Util call:self.api selector:action args:&offset, &limit, &columnName, &sortDirection, &total,nil] retain];
    }

    _gridView.total = total;
    [_gridView reloadData];
}

@end