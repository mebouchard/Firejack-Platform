//@tag opf-editor
/*
 * Firejack Platform - Copyright (c) 2012 Firejack Technologies
 *
 * This source code is the product of the Firejack Technologies
 * Core Technologies Team (Benjamin A. Miller, Oleg Marshalenko, and Timur
 * Asanov) and licensed only under valid, executed license agreements
 * between Firejack Technologies and its customers. Modification and / or
 * re-distribution of this source code is allowed only within the terms
 * of an executed license agreement.
 *
 * Any modification of this code voids any and all warranties and indemnifications
 * for the component in question and may interfere with upgrade path. Firejack Technologies
 * encourages you to extend the core framework and / or request modifications. You may
 * also submit and assign contributions to Firejack Technologies for consideration
 * as improvements or inclusions to the platform to restore modification
 * warranties and indemnifications upon official re-distributed in patch or release form.
 */


Ext.define('OPF.core.component.editor.FieldGridFieldSet', {
    extend: 'OPF.core.component.LabelContainer',

    layout: 'hbox',

    fieldLabel: 'Fields',
    subFieldLabel: '',

    initComponent: function() {
        var instance = this;

        this.store = new Ext.data.Store({
            model: 'OPF.console.domain.model.FieldModel',
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    idProperty: 'id',
                    root: 'fields'
                },
                writer: {
                    type: 'json'
                }
            }
        });

        this.grid = Ext.create('Ext.grid.Panel', {
            cls: 'border-radius-grid-body border-radius-grid-docked-top',
            store: this.store,
            flex: 1,
            height: 240,
            columns: [
                {
                    xtype: 'gridcolumn',
                    text: '!',
                    dataIndex: 'inherited',
                    sortable: true,
                    align: 'center',
                    width: 30,
                    renderer: function(inherited, metaData, record) {
                        var iconName = 'table_';
                        var autoGenerated = record.get('autoGenerated');
                        if (autoGenerated) {
                            iconName += 'lock';
                        } else if (inherited) {
                            iconName += 'inherited';
                        } else {
                            iconName += 'own';
                        }
                        return '<img src="' + OPF.Ui.icon16(iconName + '_16.png') + '">';
                    }
                },
                OPF.Ui.populateColumn('name', 'Field', {width: 125, renderer: 'htmlEncode'}),
                OPF.Ui.populateColumn('fieldTypeName', 'Type', {width: 125}),
                OPF.Ui.populateBooleanColumn('required', 'Required', {width: 50, trueText: 'Yes', falseText: 'No'}),
                OPF.Ui.populateBooleanColumn('searchable', 'Searchable', {width: 50, trueText: 'Yes', falseText: 'No'}),
                OPF.Ui.populateColumn('defaultValue', 'Default', {width: 100}),
                OPF.Ui.populateColumn('displayName', 'Display Name', {width: 125}),
                OPF.Ui.populateColumn('displayDescription', 'Display Description', {width: 125}),
                OPF.Ui.populateColumn('allowedValues', 'Allowed Values', {flex: 1,
                    renderer: function(inherited, metaData, model) {
                        var allowedValues = model.get('allowedValues');
                        return allowedValues.join(', ');
                    }}
                )
            ],
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'fieldGridDDGroup'
                }
            },
            tbar: [
                {
                    text: 'Add',
                    iconCls: 'silk-add',
                    handler: function(btn, ev) {
                        instance.getEditorDialog().startEditing();
                    }
                },
                '-',
                {
                    text: 'Delete',
                    iconCls: 'silk-delete',
                    handler: function(btn) {
                        var grid = btn.up('grid');
                        var models = grid.getSelectionModel().getSelection();
                        if (models != null && models.length > 0) {
                            var modelsToDelete = [];
                            for (var i = 0; i < models.length; i++) {
                                var autoGenerated = models[i].get('autoGenerated');
                                var inherited = models[i].get('inherited');
                                if ((OPF.isEmpty(autoGenerated) || !autoGenerated) && (OPF.isEmpty(inherited) || !inherited)) {
                                    modelsToDelete.push(models[i]);
                                }
                            }
                            if (models.length > modelsToDelete.length) {
                                Ext.Msg.alert('Warning', 'Could not delete auto-generated or inherited fields.');
                            }
                            if (modelsToDelete.length > 0) {
                                grid.store.remove(modelsToDelete);
                            }
                        }
                    }
                }
            ],
            listeners: {
                itemdblclick: function(grid, record, item, index) {
                    var autoGenerated = record.get('autoGenerated');
                    var inherited = record.get('inherited');
                    if (!autoGenerated && !inherited) {
                        instance.getEditorDialog().startEditing(index);
                    }
                }
            }
        });

        this.items = [
            this.grid
        ];

        this.callParent(arguments);
    },

    getEditorDialog: function() {
        var editorDialog = Ext.WindowMgr.get('fieldEditorDialog');
        if (OPF.isEmpty(editorDialog)) {
            editorDialog = new OPF.core.component.editor.FieldEditorDialog(this);
            Ext.WindowMgr.register(editorDialog);
        } else {
            editorDialog.setGrid(this);
        }
        return editorDialog;
    },

    cleanFieldStore: function() {
        this.store.removeAll();
    }

});