/*
 * Firejack Platform - Copyright (c) 2012 Firejack Technologies
 *
 * This source code is the product of the Firejack Technologies
 * Core Technologies Team (Benjamin A. Miller, Oleg Marshalenko, and Timur
 * Asanov) and licensed only under valid, executed license agreements
 * between Firejack Technologies and its customers. Modification and / or
 * re-distribution of this source code is allowed only within the terms
 * of an executed license agreement.
 *
 * Any modification of this code voids any and all warranties and indemnifications
 * for the component in question and may interfere with upgrade path. Firejack Technologies
 * encourages you to extend the core framework and / or request modifications. You may
 * also submit and assign contributions to Firejack Technologies for consideration
 * as improvements or inclusions to the platform to restore modification
 * warranties and indemnifications upon official re-distributed in patch or release form.
 */

Ext.define('OPF.console.domain.controller.EntityController', {
    extend: 'Ext.app.Controller',

    views: ['EntityEditor'],

    stores: ['StandardEntities', 'TypeEntities'],

    models: ['EntityModel'],

    init: function() {
        var standardEntitiesStore = this.getStandardEntitiesStore();
        var typeEntitiesStore = this.getTypeEntitiesStore();
        standardEntitiesStore.addListener('beforeload', this.onBeforeStandardEntitiesStoreLoad, this);
        standardEntitiesStore.addListener('load', this.onStandardEntityComboLoad, this);
        typeEntitiesStore.addListener('beforeload', this.onBeforeTypeEntitiesStoreLoad, this);
        typeEntitiesStore.addListener('load', this.onTypeEntityComboLoad, this);
        this.control({
            'entity-editor': {
                afterrender: this.onRender
            },
            'entity-editor registry-node-drop-panel': {
                afternotifydrop: this.onExtendedEntitySelect,
                clear: this.onExtendedEntityClear
            },
            'entity-editor opf-combo[name=typeEntity]': {
                select: this.onTypeEntityComboSelect
            },
            'context-role-grid-fieldset button[action=add-contextual-role]': {
                click: this.onAddContextRoleBtnClick
            },
            'context-role-grid-fieldset button[action=delete-role]': {
                click: this.onDeleteContextRoleBtnClick
            },
            'context-role-selection-dlg button[action=select-context-role]': {
                click: this.onContextRolesSelectBtnClick
            }
        });
    },

    onRender: function(editor) {
        this.entityEditor = editor;
    },

    onBeforeStandardEntitiesStoreLoad: function(store, operation) {
        var params = OPF.isNotBlank(this.entityEditor.nodeBasicFields.idField.getValue()) ?
            '?exceptId=' + this.entityEditor.nodeBasicFields.idField.getValue() : '';
        store.proxy.url = OPF.core.utils.RegistryNodeType.ENTITY.generateUrl('/standard') + params;
    },

    onBeforeTypeEntitiesStoreLoad: function(store, operation) {
        var params = OPF.isNotBlank(this.entityEditor.nodeBasicFields.idField.getValue()) ?
            '?exceptId=' + this.entityEditor.nodeBasicFields.idField.getValue() : '';
        store.proxy.url = OPF.core.utils.RegistryNodeType.ENTITY.generateUrl('/data') + params;
    },

    onExtendedEntitySelect: function(panel, entityModel, data, eOpts) {
        if (this.entityEditor.selectedExtendedEntityId != entityModel.get('id')) {
            this.entityEditor.selectedExtendedEntityId = entityModel.get('id');
            var newPrimaryFields = [];
            var newFields = [];
            var oldFields = this.entityEditor.fieldGridFieldSet.grid.store.getRange();
            var i;
            for (i = 0; i < oldFields.length; i ++) {
                var inherited = oldFields[i].get('inherited');
                if (OPF.isEmpty(inherited) || !inherited) {
                    var autoGenerated = oldFields[i].get('autoGenerated');
                    if (OPF.isEmpty(autoGenerated) || !autoGenerated) {
                        newPrimaryFields.push(oldFields[i]);
                    } else {
                        newFields.push(oldFields[i])
                    }
                }
            }
            if (this.entityEditor.selectedExtendedEntityId != 0) {
                var entity = entityModel;
                var field;
                while (OPF.isNotEmpty(entity)) {
                    var isModel = Ext.isFunction(entity.get);
                    var fields = isModel ? entity.get('fields') : entity.fields;
                    if (OPF.isNotEmpty(fields)) {
                        for (i = 0; i < fields.length; i++) {
                            if (fields[i].name !== 'id' && fields[i].name !== 'created') {
                                field = Ext.create('OPF.console.domain.model.FieldModel', fields[i]);
                                field.set('inherited', true);
                                newFields.push(field);
                                field.commit();
                            }
                        }
                    }
                    entity = isModel ? entity.get('extendedEntity') : entity.extendedEntity;
                }
            }
            for (i = 0; i < newPrimaryFields.length; i++) {
                newFields.push(newPrimaryFields[i]);
            }

            var isExistIdField = false;
            var isExistCreatedField = false;
            Ext.each(newFields, function(field) {
                isExistIdField |= field.get('name') == 'id';
                isExistCreatedField |= field.get('name') == 'created';
            });
            if (!isExistIdField) {
                var createdField = Ext.create('OPF.console.domain.model.FieldModel');
                createdField.set('name', 'created');
                createdField.set('autoGenerated', true);
                createdField.set('required', true);
                createdField.set('fieldType', 'CREATION_TIME');
                createdField.set('fieldTypeName', 'Creation Time');
                createdField.set('allowedValues', []);
                createdField.commit();
                newFields.splice(0, 0, createdField);
            }
            if (!isExistIdField) {
                var idField = Ext.create('OPF.console.domain.model.FieldModel');
                idField.set('name', 'id');
                idField.set('autoGenerated', true);
                idField.set('required', true);
                idField.set('fieldType', 'NUMERIC_ID');
                idField.set('fieldTypeName', 'Numeric ID');
                idField.set('allowedValues', []);
                idField.commit();
                newFields.splice(0, 0, idField);
            }

            this.entityEditor.fieldGridFieldSet.grid.store.loadData(newFields);
        }
    },

    onExtendedEntityClear: function() {
        var entityModel = this.entityEditor.registryNodeType.createModel({
            id: 0
        });
        this.onExtendedEntitySelect(null, entityModel);
    },

    onTypeEntityComboSelect: function(combo, records, eOpts) {
        if (OPF.isNotEmpty(records)) {
            var typeValue = records[0].get('typeValue');
            this.entityEditor.isSelectedDataEntity = this.entityEditor.isDataType(typeValue);
        }
    },

    onStandardEntityComboLoad: function(store, records, success, operation, eOpts) {
        var emptyEntity = Ext.create('OPF.console.domain.model.EntityModel', {
            id: '0',
            lookup: 'Select an entity to extend...'
        });
        emptyEntity.commit();
        store.insert(0, emptyEntity);
    },

    onTypeEntityComboLoad: function(store, records, success, operation, eOpts) {
        var emptyEntity = Ext.create('OPF.console.domain.model.EntityModel', {
            id: '0',
            lookup: 'Select a type entity to extend...'
        });
        emptyEntity.commit();
        store.insert(0, emptyEntity);
    },

    onAddContextRoleBtnClick: function(btn) {
        var contextRoleGrid = OPF.Ui.getCmp("context-role-grid-fieldset");
        var assignedRoles = contextRoleGrid.assignedRolesStore.getRange();
        var idsToSkip = [];
        if (assignedRoles != null && Ext.isArray(assignedRoles)) {
            for (var i = 0; i < assignedRoles.length; i++) {
                idsToSkip.push(assignedRoles[i].get('id'));
            }
        }
        contextRoleGrid.getEditorDialog(idsToSkip).show();
    },

    onDeleteContextRoleBtnClick: function(btn) {
        var contextRoleGrid = OPF.Ui.getCmp("context-role-grid-fieldset");
        var selectedModels = contextRoleGrid.rolesGrid.selModel.getSelection();
        if (selectedModels != null) {
            contextRoleGrid.rolesGrid.store.remove(selectedModels);
        }
    },

    onContextRolesSelectBtnClick: function(btn) {
        var contextRoleSelectionDlg = OPF.Ui.getCmp("context-role-selection-dlg");
        var selectedModels = contextRoleSelectionDlg.availableRolesGrid.selModel.getSelection();
        if (selectedModels != null) {
            var assignedRolesGrid = contextRoleSelectionDlg.grid;
            assignedRolesGrid.store.add(selectedModels);
            contextRoleSelectionDlg.hide();
        }
    }

});